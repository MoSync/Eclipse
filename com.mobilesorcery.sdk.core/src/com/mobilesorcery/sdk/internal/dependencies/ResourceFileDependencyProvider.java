package com.mobilesorcery.sdk.internal.dependencies;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;

import com.mobilesorcery.sdk.core.CoreMoSyncPlugin;
import com.mobilesorcery.sdk.core.MoSyncBuilder;
import com.mobilesorcery.sdk.internal.PipeTool;
import com.mobilesorcery.sdk.internal.builder.MoSyncResourceBuilderVisitor;

public class ResourceFileDependencyProvider implements
		IDependencyProvider<IResource> {

	private static final Map<IResource, Collection<IResource>> EMPTY = new HashMap<IResource, Collection<IResource>>();

	public Map<IResource, Collection<IResource>> computeDependenciesOf(
			IResource obj) throws CoreException {
		// TODO: Use centralized:
		IFile resourceOutputFile = getResourceOutput(obj.getProject());
		
		// We use a mini-hack to get the desired results;
		// first, we let every .lst file depend on the project's
		// resource file. The dependencies generated by pipetool
		// is an aggregate of all resources in the project's .lst files.
		if (MoSyncResourceBuilderVisitor.isResourceFile(obj)) {
			HashMap<IResource, Collection<IResource>> result = new HashMap<IResource, Collection<IResource>>();
			result.put(obj, new ArrayList(Arrays.asList(resourceOutputFile)));
			return result;
		} else if (obj.equals(resourceOutputFile)) {
			try {
				GCCDependencyFileParser parser = new GCCDependencyFileParser();
				IPath depsFile = PipeTool.getResourcesDependencyFile(obj
						.getProject());
				parser.parse(depsFile.toFile());
				return parser.getDependencies();
			} catch (IOException e) {
				throw new CoreException(new Status(IStatus.ERROR,
						CoreMoSyncPlugin.PLUGIN_ID, e.getMessage(), e));
			}
		} else {
			return EMPTY;
		}
	}
	
	public static IFile getResourceOutput(IProject project) {
		return project.getFolder("Output").getFile("resources");		
	}

	public static boolean isResourceOutput(IResource resource) {
		return resource.equals(getResourceOutput(resource.getProject()));
	}

}
